{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["client","createClient","App","useState","imageResults","setImageResults","userInput","setInput","likedImages","setLikedImages","counter","setCounter","imageSearched","isSearched","galleryDisplay","isDisplayed","useEffect","console","log","length","className","action","class","onSubmit","e","preventDefault","query","photos","search","per_page","then","results","for","onChange","target","value","type","id","placeholder","aria-label","aria-hidden","src","large","alt","onClick","likeCopy","push","addToLiked","href","photographer_url","rel","photographer","map","image","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yNAIMA,G,MAASC,YAAa,6DA+FbC,EA7FH,WAAO,IAAD,EACwBC,mBAAS,IADjC,mBACTC,EADS,KACKC,EADL,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEEC,EAFF,OAGsBJ,mBAAS,IAH/B,mBAGTK,EAHS,KAGIC,EAHJ,OAIcN,mBAAS,GAJvB,mBAITO,EAJS,KAIAC,EAJA,OAKoBR,oBAAS,GAL7B,mBAKTS,EALS,KAKMC,EALN,OAMsBV,oBAAS,GAN/B,mBAMTW,EANS,KAMOC,EANP,KAQhBC,qBAAU,WACRC,QAAQC,IAAIR,GAERA,IAAYN,EAAae,OAAS,IACpCF,QAAQC,IAAI,QACZH,GAAY,GACZF,GAAW,MAEZ,CAACH,IAwBJ,OACE,yBAAKU,UAAU,OACb,4BAAQA,UAAU,WAChB,0CAEF,0BAAMA,UAAU,WACd,wOAEA,2FACA,0BAAMC,OAAO,GAAGC,MAAM,aAAaC,SA/BvB,SAACC,GAEjB,GADAA,EAAEC,iBACgB,KAAdnB,EAAkB,CACpB,IAAMoB,EAAQpB,EACdN,EAAO2B,OAAOC,OAAO,CAAEF,QAAOG,SAAU,KACvCC,MAAK,SAAAC,GACJ1B,EAAgB0B,EAAQJ,QACxBd,GAAW,GACXN,EAAS,UAwBP,2BAAOyB,IAAI,SAASZ,UAAU,WAA9B,UACA,2BAAOa,SAnBS,SAACT,GAAD,OAAOjB,EAASiB,EAAEU,OAAOC,QAmBPC,KAAK,OAAOC,GAAG,SAASC,YAAY,gBACtE,4BAAQF,KAAK,SAASG,aAAW,UAC/B,uBAAGjB,MAAM,gBAAgBkB,cAAY,WAIxC5B,EACC,yBAAKQ,UAAU,mBACb,yBAAKqB,IAAKrC,EAAaM,GAAS+B,IAAIC,MAAOC,IAAI,KAC/C,4BAAQC,QAAS,kBAAMjC,EAAWD,EAAU,IAAIU,UAAU,UAAUmB,aAAW,WAA/E,gBACA,4BAAQK,QAAS,YA3BR,WACjB,IAAIC,EAAQ,YAAOrC,GACnBqC,EAASC,KAAK1C,EAAaM,IAC3BD,EAAeoC,GAwBkBE,GAAcpC,EAAWD,EAAU,IAC5DU,UAAU,OAAOmB,aAAW,QAD5B,gBAEA,uBAAGS,KAAM5C,EAAaM,GAASuC,iBAAkBf,OAAO,SAASgB,IAAI,uBAArE,IAA6F9C,EAAaM,GAASyC,eAErH,KAEDrC,EACC,oCACE,oFACA,wBAAIM,UAAU,WACXZ,EAAY4C,KAAI,SAACC,EAAOC,GACvB,OACE,wBAAIA,IAAKA,GACP,yBAAKlC,UAAU,kBACb,yBAAKqB,IAAKY,EAAMZ,IAAIC,MAAOC,IAAI,MAEjC,uBAAGK,KAAMK,EAAMJ,iBAAkBf,OAAO,SAASgB,IAAI,uBAArD,IAA6EG,EAAMF,oBAM9F,MAGH,6CACS,uBAAGH,KAAK,gCAAR,cADT,wBACmF,uBAAGA,KAAK,0BAAR,cCjFrEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.f8f8d092.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';  \nimport { createClient } from 'pexels';\nimport './App.css';\n\nconst client = createClient('563492ad6f917000010000011f5e758f86d140e99237550104aae485') \n\nconst App = () => {\n  const [imageResults, setImageResults] = useState([]);\n  const [userInput, setInput] = useState(\"\");\n  const [likedImages, setLikedImages] = useState([]); \n  const [counter, setCounter] = useState(0);\n  const [imageSearched, isSearched] = useState(false);\n  const [galleryDisplay, isDisplayed] = useState(false);\n\n  useEffect(() => {\n    console.log(counter)\n    // When the user reaches the end of the results, then display all of their liked images\n    if (counter === imageResults.length - 1) {\n      console.log(\"done\")\n      isDisplayed(true);\n      isSearched(false);\n    }\n  }, [counter])\n  \n  const getPhotos = (e) => { \n    e.preventDefault();\n    if (userInput !== \"\") {  \n      const query = userInput;\n      client.photos.search({ query, per_page: 10 })\n      .then(results => {\n        setImageResults(results.photos); \n        isSearched(true);\n        setInput(\"\");\n      }); \n    }\n  } \n\n  // Sets the input field state on each input change\n  const handleUserInput = (e) => setInput(e.target.value); \n\n  const addToLiked = () => {\n    let likeCopy = [...likedImages];\n    likeCopy.push(imageResults[counter])\n    setLikedImages(likeCopy)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"wrapper\">\n        <h1>Photohack</h1>\n      </header>\n      <main className=\"wrapper\">\n        <p>Want to create some art but can't decide if you want to paint a landscape or practice drawing portraits? Get inspired with powerful reference images, and narrow down your favourites. Let's get started!</p> \n\n        <h2>Search ideas: a subject, colour, emotion or multiple words.</h2>\n        <form action=\"\" class=\"searchForm\" onSubmit={getPhotos}>\n          <label for=\"search\" className=\"sr-only\">Search</label>\n          <input onChange={handleUserInput} type=\"text\" id=\"search\" placeholder=\"'Mountains'\"></input>\n          <button type=\"submit\" aria-label=\"Search\">\n            <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\n          </button>\n        </form> \n\n        {imageSearched? \n          <div className=\"votingContainer\">\n            <img src={imageResults[counter].src.large} alt=\"\"/>\n            <button onClick={() => setCounter(counter + 1)} className=\"dislike\" aria-label=\"dislike\">üëé</button>\n            <button onClick={() => { addToLiked(); setCounter(counter + 1) }}\n            className=\"like\" aria-label=\"like\">üëç</button>\n            <a href={imageResults[counter].photographer_url} target=\"_blank\" rel=\"noopener noreferrer\">@{imageResults[counter].photographer}</a>\n          </div>\n        : null}\n\n        {galleryDisplay? \n          <>\n            <p>Here are the images for today's creative inspiration:</p>\n            <ul className=\"gallery\">\n              {likedImages.map((image, key) => {\n                return (\n                  <li key={key}> \n                    <div className=\"imageContainer\">\n                      <img src={image.src.large} alt=\"\"/>\n                    </div> \n                    <a href={image.photographer_url} target=\"_blank\" rel=\"noopener noreferrer\">@{image.photographer}</a>\n                  </li>\n                )\n              })} \n            </ul>\n          </>\n        :null}\n\n      </main>\n      <footer>\n        ¬© 2020 <a href=\"https://github.com/robinnong\">Robin Nong</a>. Photos provided by <a href=\"https://www.pexels.com\">Pexels.</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}