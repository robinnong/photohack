{"version":3,"sources":["Form.js","Gallery.js","Footer.js","App.js","ApiKey.js","serviceWorker.js","index.js"],"names":["Form","props","action","className","onSubmit","getPhotos","htmlFor","onChange","handleUserInput","type","id","placeholder","aria-label","aria-hidden","Gallery","images","map","image","key","href","photographer_url","target","rel","src","large","alt","photographer","Footer","client","createClient","App","useState","imageResults","setImageResults","userInput","setInput","likedImages","setLikedImages","counter","setCounter","imageSearched","isSearched","galleryDisplay","isDisplayed","errorMessage","setErrorMessage","useEffect","length","e","preventDefault","query","photos","search","per_page","then","results","value","onClick","role","likeCopy","push","addToLiked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9aefbb71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form action=\"\" className=\"searchForm\" onSubmit={props.getPhotos}>\r\n            <label htmlFor=\"search\" className=\"sr-only\">Search</label>\r\n            <div>\r\n                <input onChange={props.handleUserInput} type=\"text\" id=\"search\" placeholder=\"'Mountains'\"></input>\r\n                <button type=\"submit\" aria-label=\"Search\">\r\n                    <i className=\"fas fa-search\" aria-hidden=\"true\"></i>\r\n                </button>\r\n            </div>\r\n        </form> \r\n    )\r\n}\r\n\r\nexport default Form; ","import React from 'react';\r\n\r\nconst Gallery = (props) => {\r\n    return (\r\n        <div className=\"galleryContainer\">\r\n            <p>Here is today's creative inspiration:</p>\r\n            <ul className=\"gallery\">\r\n                {props.images.map((image, key) => {\r\n                    return (\r\n                        <li key={key} >\r\n                            <a href={image.photographer_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <div className=\"imageContainer\">\r\n                                    <img src={image.src.large} alt={`Photo by ${image.photographer} from Pexels`} />\r\n                                </div>\r\n                                \r\n                                <p>@{image.photographer}</p>\r\n                            </a>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gallery; ","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            ¬© 2020 <a href=\"https://github.com/robinnong\">Robin Nong</a>. Photos provided by <a href=\"https://www.pexels.com\">Pexels.</a>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';  \nimport { createClient } from 'pexels';\nimport ApiKey from './ApiKey.js';\nimport Form from './Form.js';\nimport Gallery from './Gallery.js';\nimport Footer from './Footer.js';\nimport './App.css';\n\nconst client = createClient(ApiKey);\n\nconst App = () => {\n  const [imageResults, setImageResults] = useState([]);\n  const [userInput, setInput] = useState(\"\");\n  const [likedImages, setLikedImages] = useState([]); \n  const [counter, setCounter] = useState(0);\n  const [imageSearched, isSearched] = useState(false);\n  const [galleryDisplay, isDisplayed] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [featuredImage, setFeatured] = useState(\"\");\n\n  // // Effect runs only on the first render\n  // useEffect(() => {\n  //   // Get the featured image of the hour as the background \n  //   client.photos.curated({ per_page: 1 })\n  //   .then(result => {\n  //     setFeatured(result.photos[0].src.landscape); \n  //   });\n  // }, [])\n\n  // Effect runs whenever the counter updates - When the user reaches the end of the results, then display all of their liked images\n  useEffect(() => { \n    if (counter === imageResults.length - 1) {\n      isDisplayed(true);\n      isSearched(false);\n    }\n  }, [counter])\n  \n  // Makes a API call via the Pexels client\n  const getPhotos = (e) => { \n    e.preventDefault();\n    // Error handling - request will be made as long as the query string is not empty\n    if (userInput !== \"\") {  \n      const query = userInput;\n      client.photos.search({ query, per_page: 15 })\n      .then(results => {\n        // If not results were returned, display an error message\n        if(results.photos.length === 0) {\n          setErrorMessage(\"Sorry, we couldn't find any images based on your search üò≠ Check your spelling for try a new search term.\")\n        // If results are returned, save them to the list of results and clear the search bar\n        } else { \n          setImageResults(results.photos); \n          isSearched(true);\n          setErrorMessage(\"\");\n          setInput(\"\");\n        }\n      })\n    }\n  } \n\n  // Sets the input field state on each input change\n  const handleUserInput = (e) => setInput(e.target.value); \n\n  // Adds the current images to the list of liked images\n  const addToLiked = () => {\n    let likeCopy = [...likedImages];\n    likeCopy.push(imageResults[counter]);\n    setLikedImages(likeCopy);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Art Inspo</h1>\n      </header>\n      <main>\n        <div className=\"blue\">\n          <div className=\"wrapper\">\n            <p>Want to create some art but can't decide if you want to paint a landscape or practice drawing portraits? Get inspired with powerful reference images, and narrow down your favourites.</p>  \n\n            <p>Search ideas: a subject, colour, emotion or multiple words.</p>\n\n            <Form \n            getPhotos={(e) => getPhotos(e)}\n            handleUserInput={(e) => handleUserInput(e)}\n            />\n\n            <p className=\"errorMessage\">{errorMessage}</p>\n          </div>\n        </div>\n\n        {imageSearched? \n          <div className=\"votingContainer\">\n            <img src={imageResults[counter].src.large} alt=\"\"/>\n            <button onClick={() => setCounter(counter + 1)} className=\"dislike\" aria-label=\"dislike\">\n              <span role=\"img\" aria-hidden=\"true\">üëé</span>\n            </button>\n            <button onClick={() => { addToLiked(); setCounter(counter + 1) }}\n            className=\"like\" aria-label=\"like\">\n              <span role=\"img\" aria-hidden=\"true\">üëç</span>\n            </button>\n            <a href={imageResults[counter].photographer_url} target=\"_blank\" rel=\"noopener noreferrer\">@{imageResults[counter].photographer}</a>\n          </div>\n        : null}\n\n        {galleryDisplay? <Gallery images={likedImages}/> :null}\n\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const ApiKey = '563492ad6f917000010000011f5e758f86d140e99237550104aae485';\r\n\r\nexport default ApiKey;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}